generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

// --- Basic models

model Word {
  id                 String           @id @unique @default(uuid())
  content            String
  translationGroup   TranslationGroup @relation(fields: [translationGroupId], references: [id], onDelete: Cascade)
  translationGroupId String
  language           Language         @relation(fields: [languageName], references: [name])
  languageName       String
}

model TranslationGroup {
  id     String                      @id @unique @default(uuid())
  words  Word[]
  tags   TagsOnTranslationGroups[]
  sheets SheetsOnTranslationGroups[]
}

model Tag {
  name              String                    @id @unique @default(uuid())
  translationGroups TagsOnTranslationGroups[]
}

model Language {
  name      String  @id @unique
  words     Word[]
  fromSheet Sheet[] @relation("fromLanguage")
  toSheet   Sheet[] @relation("toLanguage")
}

model Sheet {
  id                String                      @id @unique @default(uuid())
  title             String                      @default("New Cheat Sheet")
  lookedAtTimes     Int                         @default(0)
  points            Int                         @default(0)
  containsProfanity Boolean                     @default(false)
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  translationGroups SheetsOnTranslationGroups[]
  createdBy         User                        @relation(fields: [createdByUserId], references: [id])
  createdByUserId   String

  from         Language @relation(name: "fromLanguage", fields: [fromLanguage], references: [name])
  fromLanguage String
  to           Language @relation(name: "toLanguage", fields: [toLanguage], references: [name])
  toLanguage   String
}

model User {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  username     String   @unique
  passwordHash String
  sheets       Sheet[]
}

// --- Relationship tables

model TagsOnTranslationGroups {
  tag                Tag              @relation(fields: [tagId], references: [name], onDelete: Cascade)
  tagId              String
  translationGroup   TranslationGroup @relation(fields: [translationGroupId], references: [id], onDelete: Cascade)
  translationGroupId String

  @@id([tagId, translationGroupId])
}

model SheetsOnTranslationGroups {
  sheet              Sheet            @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  sheetId            String
  translationGroup   TranslationGroup @relation(fields: [translationGroupId], references: [id], onDelete: Cascade)
  translationGroupId String

  @@id([sheetId, translationGroupId])
}
